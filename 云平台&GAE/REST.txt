含状态传输（英文：Representational State Transfer，简称REST）是Roy Fielding博士在2000年他的博士论文中提出来的一种软件架构风格
Fielding是一个非常重要的人，他是HTTP协议（1.0版和1.1版）的主要设计者、Apache服务器软件的作者之一、Apache基金会的第一任主席
我这篇文章的写作目的，就是想在符合架构原理的前提下，理解和评估以网络为基础的应用软件的架构设计，得到一个功能强、性能好、适宜通信的架构

表现层（Representation）
我们把"资源"具体呈现出来的形式，叫做它的"表现层"（Representation）
URI应该只代表"资源"的位置
HTTP请求的头信息中用Accept和Content-Type字段指定，这两个字段才是对"表现层"的描述

状态转化（State Transfer）
如果客户端想要操作服务器，必须通过某种手段，
让服务器端发生"状态转化"（State Transfer）。
而这种转化是建立在表现层之上的，所以就是"表现层状态转化"
GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源

RESTful API是目前比较成熟的一套互联网应用程序的API设计理论
RESTful架构，就是目前最流行的一种互联网软件架构（相对于单机软件而言）

（1）每一个URI代表一种资源 或者 某种服务；如：/posts/1（一个列表） /transaction（转款服务）
（2）客户端和服务器之间，传递这种资源的某种表现层；
（3）客户端通过四个HTTP动词，对服务器端资源进行操作，实现"表现层状态转化"。

三种主流的Web服务实现方案： REST模式、SOAP、ML-RPC
越来越多的web服务开始采用REST风格设计和实现

REST是设计风格而不是标准
REST通常基于使用HTTP，URI，和XML以及HTML这些现有的广泛流行的协议和标准

资源是由URI来指定。
对资源的操作包括获取、创建、修改和删除资源，这些操作正好对应HTTP协议提供的GET、POST、PUT和DELETE方法。
通过操作资源的表现形式来操作资源。
资源的表现形式则是XML或者HTML，取决于读者是机器还是人，是消费web服务的客户软件还是web浏览器。当然也可以是任何其他的格式

应该注意区别应用的状态和连接协议的状态。
HTTP连接是无状态的（也就是不记录每个连接的信息），
而REST传输会包含应用的所有状态信息，因此可以大幅降低对HTTP连接的重复请求资源消耗


含状态传输的 Web 服务（也称为 RESTful Web API）是一个使用HTTP并遵循REST原则的Web服务。它从以下三个方面资源进行定义：
1）直观简短的资源地址：URI，比如：http://example.com/resources/。
2）传输的资源：Web服务接受与返回的互联网媒体类型，比如：JSON，XML ，YAML 等。
3）对资源的操作：Web服务在该资源上所支持的一系列请求方法（比如：POST，GET，PUT或DELETE）。

REST优点：
可更高效利用缓存来提高响应速度
通讯本身的无状态性可以让不同的服务器处理一系列请求中的不同请求，提高服务器的扩展性
浏览器即可作为客户端，简化软件需求
相对于其他叠加在HTTP协议之上的机制，REST的软件依赖性更小
不需要额外的资源发现机制
在软件技术演进中的长期的兼容性更好

常用“动词”
GET /zoos：列出所有动物园
POST /zoos：新建一个动物园
GET /zoos/ID：获取某个指定动物园的信息
PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）
PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）
DELETE /zoos/ID：删除某个动物园
GET /zoos/ID/animals：列出某个指定动物园的所有动物
DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物