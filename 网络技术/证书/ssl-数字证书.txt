如果说两个人之间的通信是安全的，那么如何定义这个安全呢？

保密性（Confidentiality） 
保密性应该很容易理解，就是只有你自己和你允许的人能看到相关的信息。这和物理文件的保密性是一样的。 
完整性（Integrity） 
所谓完整性就是你的信息没有被破坏或者篡改过。举个例子比如网络聊天，保证对方收到的信息就是你发出的信息也是信息安全的一部分。
可获得性（Availability） 
可获得性是指你自己在需要的时候能够访问到信息或者保证对方能够收到你的信息。 


传输层安全协议（英语：Transport Layer Security，缩写为 TLS），及其前身
安全套接层（Secure Sockets Layer，SSL）是一种安全协议，目的是为互联网通信，提供安全及数据完整性保障。
在网景公司（Netscape）推出首版Web浏览器的同时提出SSL，
IETF将SSL进行标准化，1999年公布了 TLS标准文件

传输层安全协议使用X.509认证，
之后利用非对称加密演算来对通信方做身份认证，
之后交换对称密钥作为会谈密钥（Session key）

--------------------------------------
版本历史
--------------------------------------

SSL
1.0 版本从未公开过，因为存在严重的安全漏洞
2.0 版本在1995年2月发布，但因为存在数个严重的安全漏洞而被 3.0 版本替代[7]
3.0 版本在1996年发布，是由 Paul Kocher、Phil Karlton 和 Alan Freier 完全重新设计的。较新版本的 SSL/TLS 基于 SSL 3.0。SSL 3.0 作为历史文献 IETF 通过 RFC 6101 发表

TLS 1.0  从技术上讲，TLS 1.0 与 SSL 3.0 的差异非常微小
TLS 1.1  在 RFC 4346 中定义，于2006年4月发表
TLS 1.2  TLS 1.2 在 RFC 5246 中定义，于2008年8月发表
TLS 1.3  截至2014年10月 TLS 1.3 还是 RFC 草案, 细节并未确定
 
--------------------------------------
 TLS 协议的握手
--------------------------------------

当客户端连接到支持TLS协议的服务器要求创建安全连接并列出了受支持的密码组合（加密密码算法和加密哈希函数），握手开始。
服务器从该列表中决定加密和散列函数，并通知客户端。
服务器发回其数字证书，此证书通常包含服务器的名称、受信任的证书颁发机构（CA）和服务器的公钥。
客户端确认其颁发的证书的有效性。
为了生成会话密钥用于安全连接，客户端使用服务器的公钥加密随机生成的密钥，并将其发送到服务器，只有服务器才能使用自己的私钥解密。
利用随机数，双方生成用于加密和解密的对称密钥

第一步：
发送一个“ClientHello”消息，内容包括：
支持的协议版本，比如TLS1.0版，
一个客户端生成的随机数（稍后用户生成“会话密钥”），支持的加密算法（如RSA公钥加密）和支持的压缩算法。

第二步：
然后收到一个“ServerHello”消息，内容包括：
确认使用的加密通信协议版本，比如TLS 1.0版本。如果浏览器与服务器支持的版本不一致，服务器关闭加密通信，
一个服务器生成的随机数，稍后用于生成"对话密钥"，确认使用的加密方法，比如RSA公钥加密，服务器证书。

第三步：
当双方知道了连接参数，客户端与服务器交换证书（依靠被选择的公钥系统）。这些证书通常基于X.509，不过已有草案支持以OpenPGP为基础的证书。

第四步：
服务器请求客户端公钥。客户端有证书即双向身份认证，没证书时随机生成公钥。

第五步：
客户端与服务器通过公钥保密协商共同的主私钥（双方随机协商），这通过精心谨慎设计的伪随机数功能实现。结果可能使用Diffie-Hellman交换，或简化的公钥加密，双方各自用私钥解密。所有其他关键数据的加密均使用这个“主密钥”。