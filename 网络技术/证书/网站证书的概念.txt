Issuer 颁发者
Subject 使用者

CA 数字证书认证机构（Certificate Authority）
VA
RA

PKI是Public Key Infrastructure 公钥基础设施；
PKI是一种遵循标准的利用公钥加密技术为电子商务的开展提供一套安全基础平台的技术和规范
PKI必须支持公开密钥的管理

PMI Privilege Management Infrastructure 权限管理基础设施
PMI 仅仅使用公钥技术但并不管理公开密钥
PMI 完全可以看成PKI的一个部分

数字证书可以从身份认证机构获得。理论上任何人都可以给你发个数字证书。
换个说法就是给你发数字证书的那个人或机构对你的公钥进行加签。
对PGP和GPG系统来说，就是如此，而不需要一个统一的身份认证机构

电子证书是一个或一组电脑文件，
内载拥有人的身份数据及一组公开密码匙。
凭著电子证书文件，拥有人可向电脑系统认证自己的身分，从而访问或使用某一特定的电脑服务

数字证书一般由数字证书认证中心（数字证书颁发机构）制作颁发，根据各种不同情况，可能是CA给用户颁发的，或者用户主动申请的
国际权威的数字证书颁发认证机构
GlobalSign、VeriSign、GeoTrust

免费的数字证书颁发国际组织，比如CAcert，随着用户群的增大和颁发手段的可信性，这种免费的数字证书可信度也越来越高

在提交自己的信息之前你需要验证一下网站的身份，要求网站出示数字证书。一般正常的网站都会主动出示自己的数字证书

----------------------------
根证书
----------------------------
一个组织受信任的根证书会分发给所有需要用到的PKI系统的员工手上。
主流浏览器：IE、Netscape/Mozilla，Opera和Safari会预先安装一部分根证书，这些根证书都是受信任的证书认证机构CA，这样他们颁发的证书，浏览器将可以直接信任。
虽然用户可以删除或者禁用这些根证书，但事实上，用户很少这么做。
在最新的微软平台，甚至会在用户移除了预先安置的根证书后，当用户再访问这些被删除的根证书网站的时候，会自动将这些根证书恢复到信任列表中

----------------------------
数字证书标准
----------------------------
X.509最早在1988年7月3日推出，开始这个项目的目的，与X.500标准之间有关连。
它假定所有的数位凭证都是由一个阶层化的数字证书认证机构（Certificate Authority）发出

X.509 是由ITU-T为了公开金钥基础建设（PKI）与授权管理基础建设（PMI）提出的产业标准。
X.509 标准，规范了
公开金钥认证、
证书吊销列表、
授权凭证、
凭证路径验证算法等

任何人，不仅仅是特定的 CA，可以签发并验证其他密钥证书的有效性

----------------------------
X.509 证书结构
----------------------------
X.509 v3证书数据结构如下：
Certificate证书
Version 版本
Serial Number 序列号
Algorithm ID 算法标识
Issuer 颁发者
Validity 有效期
Not Before 有效起始日期
Not After 有效终止日期
Subject 使用者
Subject Public Key Info 使用者公钥信息
Public Key Algorithm 公钥算法
Subject Public Key 公钥
Issuer Unique Identifier (Optional) 颁发者唯一标识
Subject Unique Identifier (Optional) 使用者唯一标识
Extensions (Optional) 扩展
…
Certificate Signature Algorithm 证书签名算法
Certificate Signature 证书签名 用发证机关对该证书的数字签名

----------------------------
数字签名
----------------------------
h–Hash计算
E–加密计算
D–解密计算在签发者处，
首先求出传递消息Info的HASH值，
然后用私钥Private Key对Hash值做加密，
然后将传递消息原文Info和经过加密的HASH值一起发给接受者，

接受者
首先用签发者的公钥揭开密码，
然后对收到的Info 原文计算HASH值，
然后比对是否相对，如果相同，则认证成功。

解释：
这个证书是用Geotrust的根证书的私钥来签名的，
所以我们可以用Geotrust的公钥来对证书的SHA1哈希值进行解码，
然后验证解码后的哈希值是否和证书的哈希值一致