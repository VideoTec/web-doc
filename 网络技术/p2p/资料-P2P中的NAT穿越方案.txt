在集中服务器的帮助下，
P2P的双方利用端口预测的技术在NAT网关上打出通道，
从而实现NAT穿越，解决了NAT对于P2P的阻隔，
为P2P技术在网络中更广泛的推广作出了非常大的贡献

http://www.h3c.com.cn/About_H3C/Company_Publication/IP_Lh/2012/04/Home/Catalog/201208/751474_30008_0.htm

反向链接技术
适用场景：P2P通信双方中只有一方位于NAT设备之后
如图1所示，客户端A位于NAT之后，它通过TCP端口1234连接到服务器的TCP端口1235上，NAT设备为这个连接重新分配了TCP端口62000。客户端B也通过TCP端口1234连接到服务器端口1235上。A和B从服务器处获知的对方的外网地址二元组{IP地址:端口号}分别为{138.76.29.7:1234}和{155.99.25.11:62000}，它们在各自的本地端口上进行侦听。
由于B 拥有外网IP地址，所以A要发起与B的通信，可以直接通过TCP连接到B。但如果B尝试通过TCP连接到A进行P2P通信，则会失败，原因是A位于NAT设备后，虽然B发出的TCP SYN请求能够到达NAT设备的端口62000，但NAT设备会拒绝这个连接请求。要想与Client A通信， B不是直接向A发起连接，而是通过服务器给A转发一个连接请求，反过来请求A连接到B（即进行反向链接），A在收到从服务器转发过来的请求以后，会主动向B发起一个TCP的连接请求，这样在NAT设备上就会建立起关于这个连接的相关表项，使A和B之间能够正常通信，从而建立起它们之间的TCP连接。

二、  UDP打洞技术

适用场景： P2P通信双方都位于NAT设备之后，且进行基于UDP应用的通信

UDP打洞技术是通过中间服务器的协助在各自的NAT网关上建立相关的表项，
使P2P连接的双方发送的报文能够直接穿透对方的NAT网关，
从而实现P2P客户端互连。
如果两台位于NAT设备后面的P2P客户端希望在自己的NAT网关上打个洞，
那么他们需要一个协助者——集中服务器，并且还需要一种用于打洞的Session建立机制。
下面分三种情景介绍该机制的工作过程。

1. P2P的两个客户端位于同一个NAT设备后面，即位于同一内网中
2. P2P客户端位于不同的NAT设备后面，分属不同的内网
3. P2P客户端位于两层（或多层）NAT设备之后，
   最上层的NAT设备通常是由网络提供商（ISP）提供，
   下层NAT设备是家用路由器

集中服务器
集中服务器本质上是一台被设置在公网上的服务器，建立P2P的双方都可以直接访问到这台服务器。位于NAT网关后面的客户端A和B都可以与一台已知的集中服务器建立连接，并通过这台集中服务器了解对方的信息并中转各自的信息。
同时集中服务器的另一个重要作用在于判断某个客户端是否在NAT网关之后。具体的方法是：一个客户端在集中服务器上登陆的时候，服务器记录下该客户端的两对地址二元组信息{IP地址:UDP端口}，一对是该客户端与集中服务器进行通信的自身的IP地址和端口号，另一对是集中服务器记录下的由服务器“观察”到的该客户端实际与自己通信所使用的IP地址和端口号。我们可以把前一对地址二元组看作是客户端的内网IP地址和端口号，把后一对地址二元组看作是客户端的内网IP地址和端口号经过NAT转换后的外网IP地址和端口号。集中服务器可以从客户端的登陆消息中得到该客户端的内网相关信息，还可以通过登陆消息的IP头和UDP头得到该客户端的外网相关信息。如果该客户端不是位于NAT设备后面，那么采用上述方法得到的两对地址二元组信息是完全相同的。

Session建立机制
假定客户端A要发起对客户端B的直接连接，具体的“打洞”过程如下：
（1）A最初不知道如何向客户端B发起连接，于是A向集中服务器发送消息，请求集中服务器帮助建立与客户端B的UDP连接。
（2）集中服务器将含有B的外网和内网的地址二元组发给A，同时，集中服务器将包含有A的外网和内网的地址二元组信息的消息也发给B。这样一来， A与B就都知道对方外网和内网的地址二元组信息了。
（3）当A收到由集中服务器发来的包含B的外网和内网的地址二元组信息后， A开始向B的地址二元组发送UDP数据包，并且A会自动锁定第一个给出响应的B的地址二元组。同理，当B收到由集中服务器发来的A的外网和内网地址二元组信息后，也会开始向A的外网和内网的地址二元组发送UDP数据包，并且自动锁定第一个得到A回应的地址二元组。由于A与B互相向对方发送UDP数据包的操作是异步的，所以A和B发送数据包的时间先后并没有时序要求。

三、  TCP打洞技术
从现在的主流应用的角度上来看，基于TCP的P2P应用显然不如基于UDP的应用那么广泛，但是也存在打洞的需求。
TCP相对于UDP而言要复杂的多，TCP连接的建立要依赖于三次握手的交互，所以NAT网关在处理TCP连接的时候，需要更多的开销。但是基于TCP的P2P打洞技术却比UDP复杂一点而已，而且，由于TCP协议完备的状态机机制，TCP反而比UDP更能精确的获取某个Session的生命期。
在前面提到的各种场景下， TCP打洞技术基本上也是沿用UDP打洞技术的思路。为了配合TCP在NAT上打洞，需要应用程序支持套接字和TCP端口重用技术。此后P2P通信双方只要各自向对方发起连接，以期待恰好一次尝试在双方的NAT网关上成功的打出一条通道。当然实际的打洞详细过程会考虑到很多特殊情况的处理方式，读者可参考相关文章参考，本文对此不赘述。