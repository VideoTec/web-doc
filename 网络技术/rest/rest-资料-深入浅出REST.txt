http://www.infoq.com/cn/articles/rest-introduction

不知你是否意识到，
围绕着什么才是实现异构的应用到应用通信的“正确”方式，
一场争论正进行的如火如荼：
虽然当前主流的方式明显地集中在基于SOAP、WSDL和WS-*规范的Web Services领域，
但也有少数人用细小但洪亮的声音主张说更好的方式是REST，
表述性状态转移（REpresentational State Transfer）的简称。

在本文中，我不会涉及争论的话题，
而是尝试对REST和RESTful HTTP应用集成做实用性的介绍。
以我的经验，有些话题一旦触及就会引来众多的讨论，
当涉及到这方面话题的时候，我会深入详细地阐述。

REST关键原则

大部分对REST的介绍是以其正式的定义和背景作为开场的。
但这儿且先按下不表，
我先提出一个简单扼要的定义：

REST定义了应该如何正确地使用（这和大多数人的实际使用方式有很大不同）Web标准，
例如HTTP和URI。
如果你在设计应用程序时能坚持REST原则，
那就预示着你将会得到一个使用了优质Web架构（这将让你受益）的系统。
总之，五条关键原则列举如下：

为所有“事物”定义ID
将所有事物链接在一起
使用标准方法
资源多重表述
无状态通信