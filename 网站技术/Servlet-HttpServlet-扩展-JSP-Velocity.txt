velocity[英][vəˈlɒsəti] [美][vəˈlɑ:səti]
n.速率，速度；周转率；高速，快速

Apache Velocity 是一个基于Java的模板引擎，
它提供了一个模板语言去引用由Java代码定义的对象。
Velocity 是Apache基金会旗下的一个开源软件项目，
旨在确保Web应用程序在表示层和业务逻辑层之间的隔离（即MVC设计模式）

Velocity是一种基于Java的模板引擎，
它允许任何人使用简单而强大的模板语言来引用定义在Java代码中的对象

Velocity提供了一个简单的模板语言，供前端网页制作人员使用，
这个模板语言简单到大部分懂得JavaScript的人都可以很快掌握，其甚至比JavaScript更简单

Velocity解决了如何在Servlet和网页之间传递数据的问题，当然这种传输数据的机制是在MVC模式上进行的，
也就是View、Modle和Controller之间相互独立工作，一方的修改不影响其它方面的变动。 
他们之间的联系通过环境变量（Context）来实现，
当然网页制作方和后台程序方要相互约定好对所传递变量的命名，
比如上个程序例子中的site、name变量，它们在网页上就是$name、$site。 
这样只要双方约定好变量名字，就可以独立工作了。
无论页面如何变化，只要变量名不变，后台程序无需改动，前台网页也可以任意由网页制作人员修改

----------------------------------------
Velocity的运行包
----------------------------------------
Velocity的网站http://jakarta.apache.org/velocity/上下载Velocity的运行包，
并将其中Velocity Jar包的路径放在系统的Classpath中，这样就可以顺利编译和运行以上程序了

----------------------------------------
服务器上的 Velocity 与 JSP 技术
----------------------------------------

在服务器端可以使用 Velocity 处理模板和生成的动态内容（HTML、XML等）。这和 JSP 技术的目标非常接近。但是，
JSP 模型可以毫无阻碍地访问底层的 Servlet API 和 Java 编程语言。
事实上，为了避免访问这些固有的特性，您在编码中必须严格约束（只是使用 EL、标签库和类似的特性）。
它基本上是一种在很大程度上开放的访问模型。

拿 Velocity 与之比较。
作为一种完全自包含的模板引擎和脚本解释器，Velocity 拥有完全封闭的模型。
任何针对系统和/或 Java 编程语言的访问都必须明确地启用。
默认情况，Velocity 模板中不能访问 Java 编程语言的任何方面。
这种封闭的模型使 Velocity 能够提供分离的模板表示层，
与任何应用程序业务逻辑或者数据管理代码清晰地划分开。

----------------------------------------
velocity jsp 区别
----------------------------------------
Velocity非常适合在J2EE（Java 2 Platform，Enterprise Edition）的网站开发中替代JSP，
做输出页面的技术工作。
虽然JSP包含在J2EE规范中，但是J2EE本身并不需要JSP。

----------------------------------------
velocity比jsp更优越
----------------------------------------
网站功能确定后，由美工设计网页的UI（界面）部分，
然后由程序员在其上加入代码显示逻辑（比如循环、判断显示数据结果）。
这就是通常的JSP页面制作，当然这部分可以由美工完成模板，
然后由JSP工程师以它为原型创建相应的JSP页面

网站功能确定后，由美工设计网页的UI（界面）部分，
然后由网页制作人员在其上加入代码显示逻辑（比如循环、判断显示数据结果）。
在这一步的JSP页面制作中，网页制作人员通常只需要懂JavaScript和HTML，
在工程师的指导下学会如何嵌入JSP taglib标记，然后以美工的模板为原型制作JSP网页。 

虽然从性能角度和taglib的使用上来说，JSP比PHP和ASP做得要好，
但它在设计上同样类似PHP这种服务器页面语言，即在页面中嵌入脚本语言的技术。
这使得它虽然比传统基于CGI脚本语言的开发模式速度快，但却将后台程序逻辑与页面显示混淆。

模板引擎的设计思想最早由Webmacro提出，
并被应用在一个著名的搜索引擎www.altavista.com上。
后来，这种思想渐渐被Apache开发小组所采用，并作为一个子项目被提出来，这就是现在的Velocity

Velocity的强大之处还在于它严格地区分程序开发功能的职责划分。
它通过限制模板可能访问的对象（即后台程序允许其得到的对象）来实现这一点。
这意味着网页设计人员可以只把精力放在数据的显示部分（View），
而程序员则只要关注如何写好程序的控制层（Controller）、商业逻辑与数据管理（Model）。
这就是典型的MVC开发模式，它简化了开发和日益复杂的应用和维护工作

Velocity用得最多的还是在基于Java Servlet的网页程序中做生成网页的引擎，以替代JSP等技术。
除了使用比较容易外，它提供了强大的模板语言来显示和操作数据。
注意，不是生成数据，这点很重要，因为生成工作应该是程序逻辑的部分