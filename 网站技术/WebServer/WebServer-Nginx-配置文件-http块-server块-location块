每个 server 块对应一个 http 服务器
http://nginx.org/en/docs/http/ngx_http_core_module.html#location

-----------------------------------------------------------------
http://nginx.org/en/docs/beginners_guide.html
-----------------------------------------------------------------

Serving Static Content

1) server blocks --- in http blocks
2) location block --- in server blocks


location / {
    root /data/www;
}

This location block specifies the “/” prefix compared with the URI from the request. 
For matching requests, the URI will be added to the path specified in the root directive, 
that is, to /data/www, to form the path to the requested file on the local file system. 
If there are several matching location blocks nginx selects the one with the longest prefix. 
The location block above provides the shortest prefix, of length one, 
and so only if all other location blocks fail to provide a match, this block will be used.

location /images/ {    It will be a match for requests starting with /images/
    root /data;
}

为什么测试就是不行呢，为什么不转到指定的目录呢？
解释一：http://www.oschina.net/question/12_3565
listen       80  default_server;
nginx: [emerg] a duplicate default server for 0.0.0.0:80 in /etc/nginx/sites-enabled/default:17
文件 /etc/nginx/sites-enabled/default 是个默认配置文件：
# Generally, you will want to move this file somewhere, and start with a clean
# file but keep this around for reference. Or just disable in sites-enabled.
注意 /etc/nginx/nginx.config 配置中的后面的include语句
	include /etc/nginx/conf.d/*.conf;
	include /etc/nginx/sites-enabled/*;
参考：WebServer-Nginx-配置文件-etc-nginx-sites-enabled-default-配置文件

This is already a working configuration of a server 
that listens on the standard port 80 and is accessible on the local machine at http://localhost/. 

In response to requests with URIs starting with /images/, 
the server will send files from the /data/images directory. 

For example, 
in response to the http://localhost/images/example.png request nginx will send the /data/images/example.png file.
 
If such file does not exist, 
nginx will send a response indicating the 404 error. 
Requests with URIs not starting with /images/ will be mapped onto the /data/www directory. 

For example, 
in response to the http://localhost/some/example.html request nginx will send the /data/www/some/example.html file.

-----------------------------------------------------------------
http://www.cnblogs.com/freeweb/p/5428373.html
-----------------------------------------------------------------
在Nginx中，
一个server {}块往往用来配置一个比较大的项目，一般就是对于一个域名的所有配置，
一个server块内一般有多个location来定义多个请求规则，比如域名和根目录配置，静态资源支持，php fastcgi请求，url重写，错误页面配置等多种配置，
所以nginx代理tomcat和前面的转发php-fpm一样，就是将请求转发到后端的动态模块去处理该请求

-----------------------------------------------------------------
http://www.ha97.com/5194.html
-----------------------------------------------------------------

#设定http服务器
http
{
	include mime.types; 			#文件扩展名与文件类型映射表
	default_type application/octet-stream; #默认文件类型
	#charset utf-8; 			#默认编码
	server_names_hash_bucket_size 128; 	#服务器名字的hash表大小
	client_header_buffer_size 32k; 		#上传文件大小限制
	large_client_header_buffers 4 64k; 	#设定请求缓
	client_max_body_size 8m; 		#设定请求缓
	sendfile on; 	#开启高效文件传输模式，
			sendfile指令指定nginx是否调用sendfile函数来输出文件，
			对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，
			可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。
			注意：如果图片显示不正常把这个改成off。
	autoindex on; 		#开启目录列表访问，合适下载服务器，默认关闭。
	tcp_nopush on; 		#防止网络阻塞
	tcp_nodelay on; 	#防止网络阻塞
	keepalive_timeout 120; 	#长连接超时时间，单位是秒

	#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。
	fastcgi_connect_timeout 300;
	fastcgi_send_timeout 300;
	fastcgi_read_timeout 300;
	fastcgi_buffer_size 64k;
	fastcgi_buffers 4 64k;
	fastcgi_busy_buffers_size 128k;
	fastcgi_temp_file_write_size 128k;

	#gzip模块设置
	gzip on;		 	#开启gzip压缩输出
	gzip_min_length 1k; 		#最小压缩文件大小
	gzip_buffers 4 16k; 		#压缩缓冲区
	gzip_http_version 1.0; 		#压缩版本（默认1.1，前端如果是squid2.5请使用1.0）
	gzip_comp_level 2; 		#压缩等级
	gzip_types text/plain application/x-javascript text/css application/xml;
	#压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。
	gzip_vary on;
	#limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用

	upstream blog.ha97.com {
		#upstream的负载均衡，weight是权重，可以根据机器配置定义权重。
		weigth参数表示权值，权值越高被分配到的几率越大。
		server 192.168.80.121:80 weight=3;
		server 192.168.80.122:80 weight=2;
		server 192.168.80.123:80 weight=3;
	}

	#虚拟主机的配置
	server
	{
		#监听端口
		listen 80;
		#域名可以有多个，用空格隔开
		server_name www.ha97.com ha97.com;
		index index.html index.htm index.php;
		root /data/www/ha97;
		location ~ .*\.(php|php5)?$
		{
			fastcgi_pass 127.0.0.1:9000;
			fastcgi_index index.php;
			include fastcgi.conf;
		}
		#图片缓存时间设置
		location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$
		{
			expires 10d;
		}
		#JS和CSS缓存时间设置
		location ~ .*\.(js|css)?$
		{
			expires 1h;
		}
		#日志格式设定
		log_format access '$remote_addr - $remote_user [$time_local] "$request" '
		'$status $body_bytes_sent "$http_referer" '
		'"$http_user_agent" $http_x_forwarded_for';
		#定义本虚拟主机的访问日志
		access_log /var/log/nginx/ha97access.log access;

		#对 "/" 启用反向代理
		location / {
			proxy_pass http://127.0.0.1:88;
			proxy_redirect off;
			proxy_set_header X-Real-IP $remote_addr;
			#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			#以下是一些反向代理的配置，可选。
			proxy_set_header Host $host;
			client_max_body_size 10m; #允许客户端请求的最大单文件字节数
			client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，
			proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)
			proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)
			proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)
			proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小
			proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置
			proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）
			proxy_temp_file_write_size 64k;
			#设定缓存文件夹大小，大于这个值，将从upstream服务器传
		}

		#设定查看Nginx状态的地址
		location /NginxStatus {
			stub_status on;
			access_log on;
			auth_basic "NginxStatus";
			auth_basic_user_file conf/htpasswd;
			#htpasswd文件的内容可以用apache提供的htpasswd工具来产生。
		}

		#本地动静分离反向代理配置
		#所有jsp的页面均交由tomcat或resin处理
		location ~ .(jsp|jspx|do)?$ {
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_pass http://127.0.0.1:8080;
		}
		#所有静态文件由nginx直接读取不经过tomcat或resin
		location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$
		{ expires 15d; }
		location ~ .*.(js|css)?$
		{ expires 1h; }
	}
}
