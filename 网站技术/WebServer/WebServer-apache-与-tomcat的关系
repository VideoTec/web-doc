http://developer.51cto.com/art/201007/210894.htm

Apache是Web服务器，
Tomcat是应用（Java）服务器，它只是一个Servlet(JSP也翻译成Servlet)容器，可以认为是Apache的扩展，但是可以独立于Apache运行

https://zh.wikipedia.org/wiki/Apache_Tomcat

Tomcat是由Apache软件基金会下属的Jakarta项目开发的一个Servlet容器，
按照Sun Microsystems提供的技术规范，实现了对Servlet和JavaServer Page（JSP）的支持，
并提供了作为Web服务器的一些特有功能，如Tomcat管理和控制平台、安全域管理和Tomcat阀等。
由于Tomcat本身也内含了一个HTTP服务器，它也可以被视作一个单独的Web服务器。

但是，不能将Tomcat和Apache Web服务器混淆，
Apache Web Server是一个用C语言实现的HTTP web server；这两个HTTP web server不是捆绑在一起的。
Apache Tomcat包含了一个配置管理工具，也可以通过编辑XML格式的配置文件来进行配置。

Tomcat的Servlet引擎通常与Apache或者其他Web服务器一起工作。
除了用于开发过程中的调试以及那些对速度和事务处理只有很小要求的用户，很少会将Tomcat单独作为Web服务器。
但随着版本的更新，正有越来越多的用户将其单独作为Web服务器用以那些对速度和可靠性有较高要求的环境中。

https://www.zhihu.com/question/32212996

HTTP服务器本质上也是一种应用程序——它通常运行在服务器之上，
绑定服务器的IP地址并监听某一个tcp端口来接收并处理HTTP请求，
这样客户端（一般来说是IE, Firefox，Chrome这样的浏览器）就能够通过HTTP协议来获取服务器上的网页（HTML格式）、文档（PDF格式）、音频（MP4格式）、视频（MOV格式）等等资源

不仅仅是Apache HTTP Server和Nginx，绝大多数编程语言所包含的类库中也都实现了简单的HTTP服务器方便开发者使用：
HttpServer (Java HTTP Server )
Python SimpleHTTPServe

Apache HTTP Server和Nginx本身不支持生成动态页面，
但它们可以通过其他模块来支持（例如通过Shell、PHP、Python脚本程序来动态生成内容）。
如果想要使用Java程序来动态生成资源内容，使用这一类HTTP服务器很难做到。
Java Servlet技术以及衍生的Java Server Pages技术可以让Java程序也具有处理HTTP请求并且返回内容（由程序动态控制）的能力，
Tomcat正是支持运行Servlet/JSP应用程序的容器（Container）

Tomcat运行在JVM之上，它和HTTP服务器一样，绑定IP地址并监听TCP端口，同时还包含以下指责：
管理Servlet程序的生命周期
将URL映射到指定的Servlet进行处理
与Servlet程序合作处理HTTP请求——根据HTTP请求生成HttpServletResponse对象并传递给Servlet进行处理，
将Servlet中的HttpServletResponse对象生成的内容返回给浏览器

虽然Tomcat也可以认为是HTTP服务器，但通常它仍然会和Nginx配合在一起使用：

动静态资源分离——运用Nginx的反向代理功能分发请求：所有动态资源的请求交给Tomcat，
而静态资源的请求（例如图片、视频、CSS、JavaScript文件等）则直接由Nginx返回到浏览器，这样能大大减轻Tomcat的压力。

负载均衡，当业务压力增大时，可能一个Tomcat的实例不足以处理，那么这时可以启动多个Tomcat实例进行水平扩展，
而Nginx的负载均衡功能可以把请求通过算法分发到各个不同的实例进行处理

