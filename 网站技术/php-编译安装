问题：源码目录里没有 configure 脚本文件  —— buildconf 脚本文件，用于生成 config 脚本
查看 buildconf 文件，知道 源码分发布版和开发版 —- 从网站下载的源码压缩包，里包含 configure 脚本。
"You should not run buildconf in a release package."
http://php.net/manual/zh/install.pecl.static.php
要运行“buildconf”脚本，需要 autoconf 2.13 和 automake 1.4+
（更新版本的 autoconf 也许能工作，但不被支持）

autoconf
git clone git://git.savannah.gnu.org/autoconf.git

automake
git clone git://git.savannah.gnu.org/automake.git

http://php.net/manual/zh/install.pecl.static.php
将 PECL 扩展库静态编译入 PHP 
强制 PHP 重新生成配置脚本 即 configure 脚本，然后正常编译 PHP

http://php.net/manual/zh/install.unix.nginx.php

下载源码：
http://php.net/downloads.php
http://php.net/get/php-5.6.24.tar.gz/from/a/mirror
解压文件：


配置并构建 PHP。在此步骤您可以使用很多选项自定义 PHP，例如启用某些扩展等。 
运行 ./configure --help 命令来获得完整的可用选项清单。 
在本示例中，我们仅进行包含 PHP-FPM 和 MySQL 支持的简单配置。

./configure --enable-fpm --with-mysql
make
sudo make install

编译问题：
checking whether to enable LIBXML support... yes
checking libxml2 install dir... no
checking for xml2-config path... 
configure: error: xml2-config not found. Please check your libxml2 installation.

libxml2-dev 安装不了，为什么？
wangxiang@wangxiang-M68MT-S2P:~/code/php-5.6.24$ sudo apt-get install libxm2-dev
正在读取软件包列表... 完成
正在分析软件包的依赖关系树       
正在读取状态信息... 完成       
E: 无法定位软件包 libxm2-dev
wangxiang@wangxiang-M68MT-S2P:~/code/php-5.6.24$ sudo apt-get install libxm2-devel
正在读取软件包列表... 完成
正在分析软件包的依赖关系树       
正在读取状态信息... 完成       
E: 无法定位软件包 libxm2-devel

解决方法：[不是这个原因，是包名写错了，libxml2-dev]
更改正确的
调用 sudo apt-install update

最后使用：
sudo apt install libxml2-dev

configure: error: Cannot find OpenSSL's <evp.h>

yum install openssl-devel
或者
sudo apt-get install libcurl4-openssl-dev
apt-get install libssl-dev libsslcommon2-dev
Yes, you are right. It is libssl-dev  应该使用这个

MAC-OS  libssl-dev
brew install openssl
    LDFLAGS:  -L/usr/local/opt/openssl/lib
    CPPFLAGS: -I/usr/local/opt/openssl/include
php-configure 配置路径
--with-openssl=DIR      Include OpenSSL support (requires OpenSSL >= 0.9.6) 使用这个
--with-openssl-dir=DIR  SNMP: openssl install prefix

mac-os libcurl
sudo brew install curl
    LDFLAGS:  -L/usr/local/opt/curl/lib
    CPPFLAGS: -I/usr/local/opt/curl/include
--with-curl=DIR         Include cURL support

mac-os libiconv
checking for iconv support... yes
checking for iconv... no
checking for libiconv... no
configure: error: Please specify the install prefix of iconv with --with-iconv=<DIR>
sudo brew install homebrew/dupes/libiconv
    LDFLAGS:  -L/usr/local/opt/libiconv/lib
    CPPFLAGS: -I/usr/local/opt/libiconv/include

mac-os-x configure 语句：
./configure --enable-fpm --with-mysql --with-openssl --enable-mbstring --with-libmbfl --with-curl --with-openssl=/usr/local/opt/openssl --with-curl=/usr/local/opt/curl --with-iconv=/usr/local/opt/libiconv


-----------------------------------------------------------------
安装 phabricator 时需要 configure 选项
-----------------------------------------------------------------
./configure --enable-fpm --with-mysql --with-openssl --enable-mbstring --with-libmbfl --with-curl

重新编译后，需要重新复制
cp sapi/fpm/php-fpm /usr/local/bin

-----------------------------------------------------------------
sudo make install
-----------------------------------------------------------------

wangxiang@wangxiang-M68MT-S2P:~/code/php-5.6.24$ sudo make install
[sudo] wangxiang 的密码： 
Installing shared extensions:     /usr/local/lib/php/extensions/no-debug-non-zts-20131226/
Installing PHP CLI binary:        /usr/local/bin/
Installing PHP CLI man page:      /usr/local/php/man/man1/
Installing PHP FPM binary:        /usr/local/sbin/
Installing PHP FPM config:        /usr/local/etc/
Installing PHP FPM man page:      /usr/local/php/man/man8/
Installing PHP FPM status page:   /usr/local/php/php/fpm/
Installing PHP CGI binary:        /usr/local/bin/
Installing PHP CGI man page:      /usr/local/php/man/man1/
Installing build environment:     /usr/local/lib/php/build/
Installing header files:           /usr/local/include/php/
Installing helper programs:       /usr/local/bin/
  program: phpize
  program: php-config
Installing man pages:             /usr/local/php/man/man1/
  page: phpize.1
  page: php-config.1
Installing PEAR environment:      /usr/local/lib/php/
[PEAR] Archive_Tar    - installed: 1.4.0
[PEAR] Console_Getopt - installed: 1.4.1
[PEAR] Structures_Graph- installed: 1.1.1
[PEAR] XML_Util       - installed: 1.3.0
[PEAR] PEAR           - installed: 1.10.1
Wrote PEAR system config file at: /usr/local/etc/pear.conf
You may want to add: /usr/local/lib/php to your php.ini include_path
/home/wangxiang/code/php-5.6.24/build/shtool install -c ext/phar/phar.phar /usr/local/bin
ln -s -f phar.phar /usr/local/bin/phar
Installing PDO headers:           /usr/local/include/php/ext/pdo/

http://blog.csdn.net/ugg/article/details/25335079
Phar 归档的概念来自 Java™ 技术的 JAR 归档，
它允许使用单个文件打包应用程序，这个文件中包含运行应用程序所需的所有东西


-----------------------------------------------------------------
创建配置文件，并将其复制到正确的位置。
-----------------------------------------------------------------

cp php.ini-development /usr/local/php/php.ini  --- php-fpm -i 输出信息，可知，没有加载这个配置文件，
应该在： Configuration File (php.ini) Path	/usr/local/lib

cp /usr/local/etc/php-fpm.conf.default /usr/local/etc/php-fpm.conf     ----  make install 安装在 Installing PHP FPM config:        /usr/local/etc/
cp sapi/fpm/php-fpm /usr/local/bin    ----  make install 安装在 PHP FPM binary:        /usr/local/sbin/

-----------------------------------------------------------------
重要的设置
-----------------------------------------------------------------

需要着重提醒的是，如果文件不存在，
则阻止 Nginx 将请求发送到后端的 PHP-FPM 模块， 以避免遭受恶意脚本注入的攻击

将 php.ini 文件中的配置项 cgi.fix_pathinfo 设置为 0 。

打开 php.ini:
vim /usr/local/php/php.ini

定位到 cgi.fix_pathinfo= 并将其修改为如下所示：
cgi.fix_pathinfo=0

在启动服务之前，需要修改 php-fpm.conf 配置文件，
确保 php-fpm 模块使用 www-data 用户和 www-data 用户组的身份运行。[指定进程的用户]

vim /usr/local/etc/php-fpm.conf

找到以下内容并修改：

mandatory[英][ˈmændətəri] [美][ˈmændətɔri]
adj.强制的；命令的；受委托的
n.受托者

; Unix user/group of processes
; Note: The user is mandatory. If the group is not set, the default user's group
;       will be used.
user = www-data
group = www-data

然后启动 php-fpm 服务： 需要使用 sudo
/usr/local/bin/php-fpm

查看进程，所属的用户
mac-mini:~ wangxiang$ ps aux | grep nginx

--------------------------------------------------------
php 内建 webserver
--------------------------------------------------------
wangxiang@wangxiang-VirtualBox:~$ sudo php -S 127.0.0.1:8899 -t ~/web

1. 开放端口号 - 在远端机器上访问：
http://stackoverflow.com/questions/25591413/docker-with-php-built-in-server
start the webserver with php -S 0.0.0.0:8080 
so it also accepts connections from outside of the docker container itself
